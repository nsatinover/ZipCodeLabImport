import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.dao.RuntimeExceptionDao;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.support.ConnectionSource;

import java.sql.SQLException;

public class AccountApp {

    Console console = new Console();
    AccountService accountService = new AccountService();
    private final static String DATABASE_URL = "jdbc:mysql://localhost:3306/orm_lab?useUnicode=true";
    private final static String YOURUSERNAME = "root";
    private final static String YOURPASSWORD = "cddvdmp9";

    private Dao<Account, Integer> accountDao;
    private RuntimeExceptionDao<Account, Integer> accountRuntimeDao = null;

    public Dao<Account, Integer> getAccountDao() {
        return accountDao;
    }

    public static void main(String[] args) throws Exception {
        // turn our static method into an instance of Main
        new AccountApp().doMain(args);
    }

    private void doMain(String[] args) throws Exception {
        ConnectionSource connectionSource = null;
        try {
            // create our data-source for the database
            connectionSource = new JdbcConnectionSource(DATABASE_URL, YOURUSERNAME, YOURPASSWORD);
            // setup our  DAOs
            setupDao(connectionSource);
            // read, write and delete some data
            System.out.println("\n\nDatabase connection to \"account\" table is open\n\n");
            processData();

        } finally {
            // destroy the data source which should close underlying connections
            if (connectionSource != null) {
                connectionSource.close();
            }
        }
    }

    /**
     * Read and write some example data.
     */
    private void processData() throws Exception {
        boolean connectionOpen = true;

        while (connectionOpen){

            int userSelection = console.getMainMenu();

            switch (userSelection){
                case 1 :
                    accountService.create(getAccountDao());
                    break;
                case 2 :
                    accountService.read(getAccountDao());
                    break;
                case 3 :
                    // accountDao.update(account);
                    accountService.read(getAccountDao());
                    break;
                case 4 :
                    int idToDelete = console.getIdToDelete();
                    accountService.deleteId(getAccountDao(), idToDelete);
                    break;
                case 5 :
                    Printer.printMessage("Connection is now closed.");
                    connectionOpen = false;
            }

        }
    }

    /**
     * Setup our  DAOs
     */
    private void setupDao(ConnectionSource connectionSource) throws Exception {
        accountDao = DaoManager.createDao(connectionSource, Account.class);
    }

}
